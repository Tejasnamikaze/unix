shell
//1.calculator
# Hello World Program in Bash Shell
echo "1. Addition"
echo "2. Subtraction"
echo "3. Multiplication"
echo "4. Division"
a=20
b=20
c=3
case $c in
  1)echo "sum $((a + b))"  ;;
  2)echo "subtraction $((a - b ))"  ;;
  3)echo "multiplication $((a * b))" ;;
  4)echo  "division $((a / b))"  ;;
  *) echo "enter valid operation"
esac
//2.file permissions
-e
-f
-r
-w
-x
-d
-l
//3
echo"enter choice"
read n
case $n in
	1)pwd ;;
	2)date ;;
	3)ls ;;
	*)echo "wrong choice" 
esac
//4 factorial
echo "Enter a number"
read num

fact=1

while [ $num -gt 1 ]
do
  fact=$((fact * num))  #fact = fact * num
  num=$((num - 1))      #num = num - 1
done

echo $fact

//6 
for x in $*
do
if [ -f $x ]
then
echo " $x is  a file "
echo " no of lines in the file are "
wc -l $x
elif [ -d $x ]
then
echo " $x is  a directory "
else
echo " enter valid filename or directory name "
fi
done
//7
echo "The name of all files having all permissions :"
  

for file in *
do


if [ -f $file ]
then


if [ -r $file -a -w $file -a -x $file ]
then


ls -l $file

fi

# closing first if statement
fi

done
//8
if [ $# -lt 1]
then
echo “ Check the arguments once”
exit
fi
echo “Enter a word”
read word
for file in $*
do
grep –iv “$word” $file | tee 1> /dev/null
done
echo “ lines containing given word are deleted”
//9

echo "Using for loop method # 2... "
for (( i=1; i<=10; i++ ))
do
   echo -n "$i "
done
echo "Using while loop..."
j=1
while [ $j -le 10 ]
do
   echo -n "$j "
   j=$(( j + 1 )) # increase number by 1 
done
//10
echo "Enter the number of N"
read n
sum=0
for (( i=0; i<=n; i++ ))
   do
      sum=$((sum + I))
   done
echo "The sum of first N number is \t $s
//11
file1=$1
file2=$2
file3=$3
out="output.$$"
count=0
 
if [ $# -ne 3 ]
then
	echo "$(basename $0) file1 file2 file3"
	exit 1
fi
 
if [ ! -f $file1 ] 
then
	echo "$file1 not a file!"
	exit 2
fi
 
if [ ! -f $file2 ] 
then
	echo "$file2 not a file!"
	exit 3
fi
 
if [ ! -f $file3 ] 
then
	echo "$file3 not a file!"
	exit 4 
fi
 
cat $file1 $file2 $file3 >> $out
count=$(cat $out | wc -w)
echo "$count words written to $out"
//12
echo "Enter a string:"
string="gaeo"
len=`expr length "$string"`
if [ $len -ge 5 ]
then
echo "String length is atleast 5"
else
echo "String length is not atleast 5"
fi
//13
echo "File name:"
read fname
if [ -f $fname ]
then
tr '[:upper:]' '[:lower:]' < $fname | cat>newf.txt
else
echo "Not a file"
fi
//C PROGRAMS
//2 CAT
#include<sys/types.h>
#include<sys/stat.h>
#include<stdio.h>
#include<fcntl.h>
main( int argc,char *argv[3] )
{
int fd,i;
char buf[2];
fd=open(argv[1],O_RDONLY,0777);
if(fd==-argc)
{
printf("file open error");
}
else
{
while((i=read(fd,buf,1))>0)
{
printf("%c",buf[0]);
}
close(fd);
}
}
//MV
#include<sys/types.h>
#include<sys/stat.h>
#include<stdio.h>
#include<fcntl.h>
main( int argc,char *argv[] )
{
int i,fd1,fd2;
char *file1,*file2,buf[2];
file1=argv[1];
file2=argv[2];
printf("file1=%s file2=%s",file1,file2);
fd1=open(file1,O_RDONLY,0777);
fd2=creat(file2,0777);
while(i=read(fd1,buf,1)>0)
write(fd2,buf,1);
remove(file1);
close(fd1);
close(fd2);
}
//3
#include<stdlib.h>
#include<stdio.h>
#include<string.h>
main(int argc, char *argv[])
{
char d[50];
if(argc==2)
{
bzero(d,sizeof(d));
strcat(d,"ls ");
strcat(d,"-i ");
strcat(d,argv[1]);
system(d);
}
else
printf("\nInvalid No. of inputs");
}
//4
#include <stdio.h>
#include <sys/wait.h>  /* contains prototype for wait */
int main(void)
{
int pid;
int status;
printf("Hello World!\n");
pid = fork( );
if(pid == -1) /* check for error in fork */
{
perror("bad fork");
exit(1);
}
if (pid == 0)
printf("I am the child process.\n");
else
{
wait(&status); /* parent waits for child to finish */
printf("I am the parent process.\n");
}
}
//5
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
int main ()
{
  int pid_t child_pid;
  child_pid = fork ();
  if (child_pid > 0) {
    sleep (60);
  }
  else {
    exit (0);
  }
  return 0;
}
//6

#include <stdio.h>
main()
{
int pid ;
printf("I'am the original process with PID %d and PPID %d.\n",getpid(),getppid());
pid=fork();
if(pid!=0 )
{
printf("I'am the parent with PID %d and PPID %d.\n",getpid(),getppid());
printf("My child's PID is %d\n",pid) ;
}
else
{
sleep(4);
printf("I'm the child with PID %d and PPID %d.\n",getpid(), getppid()) ;
}
printf ("PID %d terminates.\n", getpid()) ;
}
//8
#include<stdio.h>

#include<unistd.h>

#include<sys/wait.h>

#include<sys/types.h>

int main()

{

int i;

int pid = fork();

if (pid==0)

{

for (i=0; i<20; i++)

printf("Iam child\n");

}

else

{

wait(NULL);
#include<stdio.h>

#include<unistd.h>

#include<sys/wait.h>

#include<sys/types.h>

int main()

{

int i;

int pid = fork();

if (pid == 0)

for (i=0; i<20; i++)

printf("I am Child\n");

else

{

signal(SIGCHLD, SIG_IGN);

printf("I am Parent\n");

}

}
//9
#include<stdio.h>

#include<unistd.h>

#include<sys/types.h>

#include<iostream>

#include<fcntl.h>

using namespace std;

int main()

{ int fd1;

char b1[]="Dept of IS";

char b2[]="Dept of cs";

fd1=creat("ISE.txt",0622);

if(fd1<0)

{ cout<<"Error in creating file"<<endl;

return 0; }

write(fd1,b1,10);

lseek(fd1,48,SEEK_SET);

write(fd1,b2,10);

close(fd1);

return 0;}
